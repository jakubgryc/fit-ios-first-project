#!/bin/sh
# xgrycj03 
# Jakub Gryc
# 12/3/2023

export POSIXLY_CORRECT=yes
export LC_ALL=C

EDITR=""
FILENAME=""
DATE=$(date +%Y-%m-%d_%H-%M-%S)
DATE_suffix="23-59-59" # suffix for correct functionality of -a argument (makes date YYYY-MM-DD-23-59-59)
groups=""
marg=0
garg=0
barg=0
aarg=0
darg=0
rarg=0
listarg=0
bdate=""
adate=""
SLOG=0
last_arg=""
dirpath=""
filepath=""
RETVAL=0
directories=""
LOG_DIR="/home/$USER/.mole"

## checks realpath
if  ! command -v realpath >/dev/null 2>&1 ;then
    echo "Utilita 'realpath' neni nainstalovana!"
    exit 1
fi

## if variable MOLE_RC not defined, exit 
if [ -z "$MOLE_RC" ]; then
    >&2 echo "Promenna \$MOLE_RC neni definovana!"
    exit 1
fi

## create molerc file if not defined
if [ ! -f "$MOLE_RC" ]; then
    mkdir -p "$(dirname "$MOLE_RC")"
    touch "$MOLE_RC"
fi

## set editor
if [ -z "$EDITOR" ]; then
    EDITR=$VISUAL
    if [ -z "$EDITR" ]; then
        EDITR='vi'
    fi
else
    EDITR=$EDITOR
fi

print_help() {
    echo "   
  POUZITI:

  #########################################################
  
  mole -h                               | prints help                 
  mole [-g GROUP] FILE                  | otevere FILE, pokud byl pouzit prepinac -g, priradi otevreni ke skupine GROUP
  mole [-m] [FILTERS] [DIRECTORY]       | otevre z DIRECTORY posledni zaznam, lze filtrovat pomoci [FILTERS], pouziti -m otevre nejcasteji otevreny soubor
  mole list [FILTERS] [DIRECTORY]       | vypise seznam souboru otevrenych v DIRECTORY ('PWD' pokud nebylo definovano), popr. upravi podle FILTERS
          "
      }

## parameters: realpath of FILE,realpath of directory, FILENAME,groups,date, date_hms
write_to_molerc() {
    echo "$1,$2,$3,$4,$5,$6" >> "$MOLE_RC"
}

## parameters: FILENAME
open_file() {
    setpaths "$1"

    $EDITR "$1"
}

make_dir_and_file() {
    mkdir -p "$(dirname "$1")"
    touch "$1"

}

## set dirpath and filepath
setpaths() {
    FILENAME=$(echo "$1" | awk -F/ ' {print $NF} ')
    dirpath=$(dirname "$1")
}


## parameters: marg, barg, aarg, groups, dirpath
filter() {
    if [ 1 -ne "$SLOG" ]; then
        ## no DIR set -> filter in PWD
        if [ -z "$dirpath" ]; then
            dirpath=$PWD
        fi
        if [ "1" -ne "$rarg" ]; then
            files=$(awk -F, -v DIR="$dirpath" '$2 == DIR { print }' "$MOLE_RC")
        else
            files=$(awk -F, -v DIR="$dirpath" '$1 ~ DIR { print }' "$MOLE_RC")
        fi
    else
        if [ -z "$directories" ]; then
            files=$(cat "$MOLE_RC")
        else
            if [ "1" -ne "$rarg" ]; then
                files=$(awk -F, -v DIRS="$directories" 'BEGIN{split(DIRS, arr, ",")} { for (i in arr) {if ($2 == arr[i]) { print; next }}}' "$MOLE_RC")
            else
                files=$(awk -F, -v DIRS="$directories" 'BEGIN{split(DIRS, arr, ",")} { for (i in arr) {if ($1 ~ arr[i]) { print; next }}}' "$MOLE_RC")
            fi
        fi
    fi

    ## before -b
    if [ "1" = "$barg" ]; then
        tdate="$bdate"
        files=$(echo "$files" | awk -F, -v tdate="$tdate" '$5<tdate { print }')
    fi

    ## after -a
    if [ "1" = "$aarg" ]; then
        tdate="$adate""_$DATE_suffix"
        files=$(echo "$files" | awk -F, -v tdate="$tdate" '$5>tdate { print }')
    fi

    ## filter by groups
    if [ "1" = "$garg" ]; then
        files=$(echo "$files" | awk -F, -v groups="$groups" 'BEGIN{split(groups, arr, ",")} { for (i in arr){ {if ($4 == arr[i]) { print } } } }')
    fi

    ## filter by -d -> files opened in no groups
    if [ "1" = "$darg" ]; then
        files=$(echo "$files" | awk -F, '$4 ~ /^$/ { print }')
    fi

    ## find which one was opened the most often
    if [ "1" = "$marg" ]; then
        filepath=$(echo "$files" | awk -F, ' {print $1} ' | awk '{for(i=1;i<=NF;i++) a[$i]++} END{for(i in a) print i,a[i]}' | sort -rnk2 | awk ' {print $1}' | head -1)
    else
        filepath=$(echo "$files" | tail -1 | awk -F, ' {print $1}')
    fi

    ## no matches found 
    if [ -z "$files" ]; then
        >&2 echo "Error, couldn't find any file with given filters"
        exit 1
    fi
    
}

make_list() {
    files=$(echo "$files" | awk -F, ' {print $1" "$4}' | sort -k2 | uniq)
    files=$(echo "$files" | sed "s|$dirpath/||g")
    files=$(echo "$files" | awk ' { if ($2 == "") {
                        a[$1] = ""}
                       else {
                           if (a[$1] == "") {
                               a[$1] = a[$1]"" $2}
                           else{
                           a[$1] =a[$1] "," $2}}}
                     END { for (i in a) {
                     if (a[i] == "") { print i":" " -"}
                     else {print i": " a[i]}}}' | awk ' BEGIN{len=0} {if (length($1) > len) {len = length($1)}; a[$1] = $2}  END{for (i in a) {printf "%-"len"s %s\n", i, a[i]}}' | sort -k1df)
    echo "$files"
    exit 0
}

secret_log() {
    files=$(echo "$files" | awk -F, ' {print $1"," $5}')
    files=$(echo "$files" | awk -F, '{a[$1] = a[$1] ";" $2} END {for (i in a) print i";" substr(a[i], 2)}' | sort -df)
    mkdir -p "$LOG_DIR"

    echo "$files" | bzip2 -c > "$LOG_DIR"/log_"$USER"_"$DATE".bz2
    exit 0
}

if [ "$1" = "list" ]; then
    listarg=1
    shift
elif [ "$1" = "secret-log" ]; then
    SLOG=1
    shift
fi



while getopts "g:mhb:a:dr" OPT; do 
    case $OPT in
        g)
            garg=1
            groups=$OPTARG
            ;;
        m)
            
            marg=1
            ;;
        h)
            print_help
            exit 0
            ;;
        b)
            barg=1
            bdate=$OPTARG
            ;;
        a)
            aarg=1
            adate=$OPTARG
            ;;
        d)
            darg=1
            ;;
        r)
            rarg=1
            ;;
        ?)
            print_help
            exit 1
            ;;
    esac
done

## -d and -g are exclusive
if [ 1 -eq $darg ] && [ 1 -eq $garg ]; then
    >&2 echo "Nelze zadat prepinace -d a -g najednou!"
    exit 1
fi

if [ 1 -ne $SLOG ]; then
    while [ "$#" -gt 1 ]; do
        if [ "$1" = "-a" ] || [ "$1" = "-g" ] || [ "$1" = "-b" ]; then
            shift 2
        else
            shift
        fi
    done
else
    if [ "$1" = "-a" ]; then
        shift 2
    fi
    if [ "$1" = "-b" ]; then
        shift 2
    fi
    if [ "$1" = "-r" ]; then
        shift
    fi
fi

last_arg="$1"

## parsing directories for secret-log
if [ 1 -eq $SLOG ]; then
    if [ -n "$1" ]; then
        directories=$(realpath "$1")
        shift
    fi
    while [ "$#" -gt 0 ]; do
        directories="$directories"","$(realpath "$1")
        shift
    done
    #echo "$directories"
    filter 
    secret_log 
    exit 0
fi


## if only -m or -d, then last_arg is "" -> $PWD
if [ "$last_arg" = "-d" ] || [ "$last_arg" = "-r" ] || [ "$last_arg" = "-m" ]; then
    last_arg=""
fi

if [ -d "$last_arg" ]; then
    dirpath=$(realpath "$last_arg")
elif [ -z "$last_arg" ]; then
    dirpath=""
else 
    if [ ! -f "$last_arg" ]; then
        make_dir_and_file "$last_arg"
    fi
    filepath=$(realpath "$last_arg")
fi



if [ 1 -ne $SLOG ]; then
    ## make list
    if [ 1 -eq $listarg ]; then
        dirpath=$(realpath "$last_arg")
        filter
        make_list
        exit 0
    fi
    ## open and assign group if any
    if  [ -n "$filepath" ]; then
        open_file "$filepath"
        RETVAL=$?
        write_to_molerc "$filepath" "$dirpath" "$FILENAME" "$groups" "$DATE"
    ## open file via filter
    else 
        filter 
        open_file "$filepath"
        RETVAL=$?
        write_to_molerc "$filepath" "$dirpath" "$FILENAME" "" "$DATE"
    fi
fi

exit $RETVAL
